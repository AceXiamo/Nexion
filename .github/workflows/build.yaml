name: Build Cross-Platform (Mainnet)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            artifact_name: nexion-windows-mainnet
            build_files: |
              dist/*.exe
              dist/*.msi
              dist/*.appx
              dist/win-unpacked/
          - os: macos-latest
            platform: macos  
            artifact_name: nexion-macos-mainnet
            build_files: |
              dist/*.dmg
              dist/*.zip
              dist/mac/
          - os: ubuntu-latest
            platform: linux
            artifact_name: nexion-linux-mainnet
            build_files: |
              dist/*.AppImage
              dist/*.deb
              dist/*.rpm
              dist/*.tar.gz
              dist/linux-unpacked/
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
    
    # Windows specific setup - 修正版本
    - name: Setup Python (Windows)
      if: matrix.platform == 'windows'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Setup MSBuild (Windows)
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v2  # ✅ 更新到 v2
    
    - name: Setup Windows Build Environment
      if: matrix.platform == 'windows'
      run: |
        # ❌ 移除已弃用的 windows-build-tools
        # npm install -g windows-build-tools
        
        # ✅ 使用现代化的构建工具配置
        npm config set msvs_version 2022
        npm config set python python3
        
        # 验证构建环境
        echo "Node.js version:"
        node --version
        echo "Python version:"
        python --version
        echo "MSBuild configuration:"
        npm config get msvs_version
      shell: cmd
      continue-on-error: true
    
    # macOS specific setup
    - name: Setup Python (macOS)
      if: matrix.platform == 'macos'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    # Linux specific setup - 修正的依赖包名
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxrandr-dev \
          libgbm-dev \
          libxss-dev \
          libasound2-dev \
          libgtk-3-dev \
          build-essential \
          python3-dev \
          libnss3 \
          libxss1 \
          libxtst6 \
          libatspi2.0-0 \
          libdrm2 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxkbcommon-x11-0
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      env:
        npm_config_msvs_version: 2022
        PYTHON: python3
    
    # ✅ 添加 Windows 原生模块重建步骤
    - name: Rebuild native modules (Windows)
      if: matrix.platform == 'windows'
      run: |
        # 尝试重建 node-pty 等原生模块
        npx node-gyp --version
        yarn add --dev @electron/rebuild
        npx electron-rebuild
      shell: cmd
      continue-on-error: true
    
    - name: Run lint
      run: yarn lint
      continue-on-error: true
    
    # 构建主网版本
    - name: Build Mainnet Application
      run: yarn build:mainnet
      env:
        BUILD_NETWORK: mainnet
        # 禁用 CSC_IDENTITY_AUTO_DISCOVERY 避免签名失败
        CSC_IDENTITY_AUTO_DISCOVERY: false
        # CSC_LINK: ${{ secrets.CSC_LINK }}
        # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        # WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
        # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List build output
      run: |
        ls -la dist/ || dir dist
        find dist/ -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" || echo "No main installers found"
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.sha }}
        path: ${{ matrix.build_files }}
        retention-days: 30
    
    - name: Upload release assets
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}-${{ github.sha }}
        path: |
          dist/*.exe
          dist/*.msi  
          dist/*.dmg
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        retention-days: 5

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*-${{ github.sha }}
        merge-multiple: true
        path: ./release-files
    
    - name: List release files
      run: |
        ls -la ./release-files/
        find ./release-files/ -type f
    
    - name: Create Release in Organization Repo
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.NEXION_RELEASE_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 创建 Release
          const tagName = context.ref.replace('refs/tags/', '');
          console.log(`Creating release for tag: ${tagName}`);
          
          const release = await github.rest.repos.createRelease({
            owner: 'NexionDev',
            repo: 'app',
            tag_name: tagName,
            name: `Nexion v${tagName} (Mainnet)`,
            body: `🚀 **Nexion Mainnet Release v${tagName}**
          
          This is a cross-platform mainnet build of Nexion.

          **Downloads:**
          
          ### Windows
          - 📦 \`.exe\` - Windows installer (NSIS)  
          - 📦 \`.msi\` - Windows MSI package
          
          ### macOS  
          - 🍎 \`.dmg\` - macOS disk image
          
          ### Linux
          - 🐧 \`.AppImage\` - Portable Linux application
          - 🐧 \`.deb\` - Debian/Ubuntu package
          - 🐧 \`.rpm\` - RedHat/Fedora package
          
          **Network:** Mainnet
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Source Commit:** ${{ github.sha }}`,
            draft: false,
            prerelease: false
          });
          
          console.log(`Release created: ${release.data.html_url}`);
          
          // 上传文件
          const releaseDir = './release-files';
          const files = fs.readdirSync(releaseDir);
          
          for (const fileName of files) {
            const filePath = path.join(releaseDir, fileName);
            const stats = fs.statSync(filePath);
            
            if (stats.isFile()) {
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: 'NexionDev',
                repo: 'app',
                release_id: release.data.id,
                name: fileName,
                data: fileData
              });
              
              console.log(`✅ Uploaded ${fileName}`);
            }
          }
          
          console.log('🎉 All files uploaded successfully!');
