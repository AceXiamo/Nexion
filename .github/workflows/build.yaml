name: Build Cross-Platform (Mainnet)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            artifact_name: nexion-windows-mainnet
            build_files: |
              dist/*.exe
              dist/*.msi
              dist/*.appx
              dist/win-unpacked/
          - os: macos-latest
            platform: macos  
            artifact_name: nexion-macos-mainnet
            build_files: |
              dist/*.dmg
              dist/*.zip
              dist/mac/
          - os: ubuntu-latest
            platform: linux
            artifact_name: nexion-linux-mainnet
            build_files: |
              dist/*.AppImage
              dist/*.deb
              dist/*.rpm
              dist/*.tar.gz
              dist/linux-unpacked/
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.11.0'
        cache: 'yarn'
    
    # Windows specific setup
    - name: Setup Python (Windows)
      if: matrix.platform == 'windows'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Setup MSBuild (Windows)
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v1
    
    # macOS specific setup
    - name: Setup Python (macOS)
      if: matrix.platform == 'macos'
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    # Linux specific setup - ‰øÆÊ≠£ÁöÑ‰æùËµñÂåÖÂêç
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxrandr-dev \
          libgbm-dev \
          libxss-dev \
          libasound2-dev \
          libgtk-3-dev \
          build-essential \
          python3-dev \
          libnss3 \
          libxss1 \
          libxtst6 \
          libatspi2.0-0 \
          libdrm2 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxkbcommon-x11-0
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      env:
        npm_config_msvs_version: 2022
        PYTHON: python3
    
    - name: Run lint
      run: yarn lint
      continue-on-error: true
    
    # ÊûÑÂª∫‰∏ªÁΩëÁâàÊú¨
    - name: Build Mainnet Application
      run: yarn build:mainnet
      env:
        BUILD_NETWORK: mainnet
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
        WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List build output
      run: |
        ls -la dist/ || dir dist
        find dist/ -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" || echo "No main installers found"
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.sha }}
        path: ${{ matrix.build_files }}
        retention-days: 30
    
    - name: Upload release assets
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}-${{ github.sha }}
        path: |
          dist/*.exe
          dist/*.msi  
          dist/*.dmg
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        retention-days: 5

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*-${{ github.sha }}
        merge-multiple: true
        path: ./release-files
    
    - name: List release files
      run: |
        ls -la ./release-files/
        find ./release-files/ -type f
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release-files/*
        draft: false
        prerelease: false
        name: Nexion v${{ github.ref_name }} (Mainnet)
        body: |
          üöÄ **Nexion Mainnet Release v${{ github.ref_name }}**
          
          This is a cross-platform mainnet build of Nexion.
          
          **Downloads:**
          
          ### Windows
          - üì¶ `.exe` - Windows installer (NSIS)  
          - üì¶ `.msi` - Windows MSI package
          
          ### macOS  
          - üçé `.dmg` - macOS disk image
          
          ### Linux
          - üêß `.AppImage` - Portable Linux application
          - üêß `.deb` - Debian/Ubuntu package
          - üêß `.rpm` - RedHat/Fedora package
          
          **Network:** Mainnet
          **Build Date:** ${{ github.event.head_commit.timestamp }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
